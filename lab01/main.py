import re
from datetime import datetime

class PasswordSecurityAnalyzer:
    def __init__(self):
        self.personal_data = {}
        
    def input_personal_data(self):
        print("=== –í–í–ï–î–ï–ù–ù–Ø –ü–ï–†–°–û–ù–ê–õ–¨–ù–ò–• –î–ê–ù–ò–• ===")
        self.personal_data['password'] = input("–í–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å: ")
        self.personal_data['name'] = input("–í–≤–µ–¥—ñ—Ç—å —ñ–º'—è (–ª–∞—Ç–∏–Ω–∏—Ü–µ—é): ").lower()
        self.personal_data['birth_date'] = input("–í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è (–î–î.–ú–ú.–†–†–†–†): ")
        
        # –í–∏—Ç—è–≥—É—î–º–æ —Ä—ñ–∫ –∑ –¥–∞—Ç–∏ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è
        try:
            self.personal_data['birth_year'] = self.personal_data['birth_date'].split('.')[2]
        except:
            self.personal_data['birth_year'] = ""
    
    def analyze_personal_data_usage(self):
        password = self.personal_data['password'].lower()
        issues = []
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —ñ–º–µ–Ω—ñ
        if self.personal_data['name'] in password:
            issues.append(f"–ü–∞—Ä–æ–ª—å –º—ñ—Å—Ç–∏—Ç—å –≤–∞—à–µ —ñ–º'—è: {self.personal_data['name']}")
            
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —Ä–æ–∫—É –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è
        if self.personal_data['birth_year'] in password:
            issues.append(f"–ü–∞—Ä–æ–ª—å –º—ñ—Å—Ç–∏—Ç—å —Ä—ñ–∫ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è: {self.personal_data['birth_year']}")
            
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –¥–∞—Ç–∏ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è
        if self.personal_data['birth_date'].replace('.', '') in password.replace('.', ''):
            issues.append(f"–ü–∞—Ä–æ–ª—å –º—ñ—Å—Ç–∏—Ç—å –¥–∞—Ç—É –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è")
            
        return issues
    
    def evaluate_password_complexity(self):
        password = self.personal_data['password']
        score = 0
        criteria = []
        
        # –î–æ–≤–∂–∏–Ω–∞ –ø–∞—Ä–æ–ª—è
        if len(password) >= 12:
            score += 3
            criteria.append("‚úì –î–æ–≤–∂–∏–Ω–∞ 12+ —Å–∏–º–≤–æ–ª—ñ–≤ (3 –±–∞–ª–∏)")
        elif len(password) >= 8:
            score += 2
            criteria.append("‚úì –î–æ–≤–∂–∏–Ω–∞ 8+ —Å–∏–º–≤–æ–ª—ñ–≤ (2 –±–∞–ª–∏)")
        elif len(password) >= 6:
            score += 1
            criteria.append("‚úì –î–æ–≤–∂–∏–Ω–∞ 6+ —Å–∏–º–≤–æ–ª—ñ–≤ (1 –±–∞–ª)")
        else:
            criteria.append("‚úó –ó–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–∏–π –ø–∞—Ä–æ–ª—å (0 –±–∞–ª—ñ–≤)")
            
        # –†—ñ–∑–Ω–æ–º–∞–Ω—ñ—Ç–Ω—ñ—Å—Ç—å —Å–∏–º–≤–æ–ª—ñ–≤
        if re.search(r'[a-z]', password):
            score += 1
            criteria.append("‚úì –ú—ñ—Å—Ç–∏—Ç—å –º–∞–ª—ñ –ª—ñ—Ç–µ—Ä–∏ (1 –±–∞–ª)")
        else:
            criteria.append("‚úó –ù–µ –º—ñ—Å—Ç–∏—Ç—å –º–∞–ª—ñ –ª—ñ—Ç–µ—Ä–∏ (0 –±–∞–ª—ñ–≤)")
            
        if re.search(r'[A-Z]', password):
            score += 2
            criteria.append("‚úì –ú—ñ—Å—Ç–∏—Ç—å –≤–µ–ª–∏–∫—ñ –ª—ñ—Ç–µ—Ä–∏ (2 –±–∞–ª–∏)")
        else:
            criteria.append("‚úó –ù–µ –º—ñ—Å—Ç–∏—Ç—å –≤–µ–ª–∏–∫—ñ –ª—ñ—Ç–µ—Ä–∏ (0 –±–∞–ª—ñ–≤)")
            
        if re.search(r'\d', password):
            score += 2
            criteria.append("‚úì –ú—ñ—Å—Ç–∏—Ç—å —Ü–∏—Ñ—Ä–∏ (2 –±–∞–ª–∏)")
        else:
            criteria.append("‚úó –ù–µ –º—ñ—Å—Ç–∏—Ç—å —Ü–∏—Ñ—Ä–∏ (0 –±–∞–ª—ñ–≤)")
            
        if re.search(r'[!@#$%^&*()_+\-=\[\]{};:"\\|,.<>\/?]', password):
            score += 2
            criteria.append("‚úì –ú—ñ—Å—Ç–∏—Ç—å —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ —Å–∏–º–≤–æ–ª–∏ (2 –±–∞–ª–∏)")
        else:
            criteria.append("‚úó –ù–µ –º—ñ—Å—Ç–∏—Ç—å —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ —Å–∏–º–≤–æ–ª–∏ (0 –±–∞–ª—ñ–≤)")
            
        # –°–ª–æ–≤–Ω–∏–∫–æ–≤—ñ —Å–ª–æ–≤–∞
        common_words = ['password', '–ø–∞—Ä–æ–ª—å', '123456', 'qwerty', 'admin', 'user', '1234', '12345678', '1234567890']
        for word in common_words:
            if word.lower() in password.lower():
                score -= 2
                criteria.append(f"‚úó –ú—ñ—Å—Ç–∏—Ç—å —Å–ª–æ–≤–Ω–∏–∫–æ–≤–µ —Å–ª–æ–≤–æ '{word}' (-2 –±–∞–ª–∏)")
                
        return score, criteria
    
    def provide_recommendations(self, score, personal_issues):
        recommendations = []
            
        if score < 5 or personal_issues:
            recommendations.append("üî¥ –ü–∞—Ä–æ–ª—å –¥—É–∂–µ —Å–ª–∞–±–∫–∏–π! –ù–µ–≥–∞–π–Ω–æ –∑–º—ñ–Ω—ñ—Ç—å –π–æ–≥–æ!")
        elif score < 6:
            recommendations.append("üü° –ü–∞—Ä–æ–ª—å —Å–ª–∞–±–∫–∏–π. –†–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è –ø–æ–∫—Ä–∞—â–∏—Ç–∏.")
        elif score < 8:
            recommendations.append("üü¢ –ü–∞—Ä–æ–ª—å —Å–µ—Ä–µ–¥–Ω—å–æ—ó —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ. –ú–æ–∂–Ω–∞ –ø–æ–∫—Ä–∞—â–∏—Ç–∏.")
        else:
            recommendations.append("üü¢ –ü–∞—Ä–æ–ª—å —Å–∏–ª—å–Ω–∏–π! –ì–∞—Ä–Ω–∞ —Ä–æ–±–æ—Ç–∞!")
        
        return recommendations
    
    def run_analysis(self):
        print("–ê–ù–ê–õ–Ü–ó–ê–¢–û–† –ë–ï–ó–ü–ï–ö–ò –ü–ê–†–û–õ–Ü–í\n")
        
        # –í–≤–µ–¥–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
        self.input_personal_data()
        
        print("\n" + "="*50)
        print("–†–ï–ó–£–õ–¨–¢–ê–¢–ò –ê–ù–ê–õ–Ü–ó–£")
        print("="*50)
        
        # –ê–Ω–∞–ª—ñ–∑ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö
        personal_issues = self.analyze_personal_data_usage()
        if personal_issues:
            print("\nüî¥ –í–ò–Ø–í–õ–ï–ù–û –í–ò–ö–û–†–ò–°–¢–ê–ù–ù–Ø –ü–ï–†–°–û–ù–ê–õ–¨–ù–ò–• –î–ê–ù–ò–•:")
            for issue in personal_issues:
                print(f"   ‚Ä¢ {issue}")
        else:
            print("\nüü¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ –Ω–µ –≤–∏—è–≤–ª–µ–Ω–æ –≤ –ø–∞—Ä–æ–ª—ñ")
            
        # –û—Ü—ñ–Ω–∫–∞ —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ
        score, criteria = self.evaluate_password_complexity()
        print(f"\n–û–¶–Ü–ù–ö–ê –°–ö–õ–ê–î–ù–û–°–¢–Ü: {score}/10 –±–∞–ª—ñ–≤")
        print("\n–î–µ—Ç–∞–ª—ñ–∑–∞—Ü—ñ—è:")
        for criterion in criteria:
            print(f"   {criterion}")
            
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó
        recommendations = self.provide_recommendations(score, personal_issues)
        print(f"\n–†–ï–ö–û–ú–ï–ù–î–ê–¶–Ü–á:")
        for rec in recommendations:
            print(rec)

# –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ–≥—Ä–∞–º–∏
if __name__ == "__main__":
    analyzer = PasswordSecurityAnalyzer()
    analyzer.run_analysis()